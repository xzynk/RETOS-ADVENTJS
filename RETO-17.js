/* 
Las empresas de paqueter칤a 游닍 se preparan para la 칠poca de fiestas y la locura de env칤os que les espera.

La empresa funciona con flotas de furgonetas 游뚵 y camiones 游뚴.
Las flotas tienen un organigrama, ya que existen rangos de nivel de experiencia.

Necesitamos saber el n칰mero de paquetes que una persona va a poder gestionar en un d칤a.
Para ello se cuenta el n칰mero de paquetes que puede llevar esa persona y todos los transportistas
que tiene en su equipo. Lo malo es que los datos est치n almacenados de una forma un poco rara en un array:

El array contiene otros arrays que contienen los datos de cada transportista
transportista[0] -> Nombre/ID del Transportista
transportista[1] -> Paquetes que gestiona en un d칤a
transportista[2] -> Array con sus subordinados

Para que lo veamos en c칩digo, tanto el array, como la funci칩n de dos par치metros para conseguir el n칰mero deseado:

const carriers = [
  ['dapelu', 5, ['midu', 'jelowing']],
  ['midu', 2, []],
  ['jelowing', 2, []]
]

countPackages(carriers, 'dapelu') // 9
// 5 de dapelu, 2 de midu y 2 de jelowing = 9

const carriers2 = [
  ['lolivier', 8, ['camila', 'jesuspoleo']],
  ['camila', 5, ['sergiomartinez', 'conchaasensio']],
  ['jesuspoleo', 4, []],
  ['sergiomartinez', 4, []],
  ['conchaasensio', 3, ['facundocapua', 'faviola']],
  ['facundocapua', 2, []],
  ['faviola', 1, []]
]

countPackages(carriers2, 'camila') // 15
// 5 de camila, 4 de sergiomartinez, 3 de conchaasensio, 2 de facundocapua y 1 de faviola = 15
춰Ten cuidado! Como has visto en el segundo ejemplo, el organigrama puede tener diferentes niveles y adem치s nos viene informaci칩n que puede ser que no necesitemos. Debemos tener en cuenta el par치metro de carrierID para calcular bien el n칰mero y contar todo su equipo.
*/

function countPackages(carriers, carrierID) {
  let carrierDict = {}

  //Guardamos la informacion en un diccionario
  for (let trans of carriers) {
    carrierDict[trans[0]] = {
      capacity: trans[1],
      subcarriers: trans[2],
    }
  }

  //Guardamos la informacion de los ayudantes
  const subTransport = []
  let capacity = 0

  //A침adimos el usuario actual a la fila
  subTransport.push(carrierID)

  /* for (let transport of carriers) {
    if (transport[0] === carrierID) {
      if (transport[2].length !== 0) {
        for (let subordinado of transport[2]) {
          capacity += countPackages(carriers, subordinado)
        }
      }
      capacity += transport[1]
    }
  } */
  return carrierDict
}

/* Este c칩digo parece ser una funci칩n recursiva que cuenta el n칰mero total de paquetes en un conjunto de transportistas, dado un identificador de transportista espec칤fico. Aqu칤 hay algunas sugerencias para mejorar el c칩digo:

En lugar de recorrer la lista de transportistas en cada iteraci칩n de la funci칩n, podr칤a guardar la informaci칩n sobre el transportista en un diccionario para poder acceder a ella m치s r치pidamente. Esto har칤a que la funci칩n sea m치s r치pida, ya que no tendr칤a que recorrer la lista completa en cada iteraci칩n.

En lugar de recorrer el arreglo de identificadores de transportistas secundarios en cada iteraci칩n, podr칤a usar una cola para almacenarlos y recorrerlos de manera m치s eficiente. Esto tambi칠n mejorar칤a el rendimiento de la funci칩n.

Podr칤a utilizar una variable de contador en lugar de acumular la capacidad en cada iteraci칩n. Esto har칤a que el c칩digo sea m치s claro y m치s f치cil de entender.

Podr칤a utilizar una funci칩n auxiliar para recorrer el arreglo de transportistas secundarios, en lugar de hacerlo dentro del cuerpo principal de la funci칩n. Esto har칤a que el c칩digo sea m치s limpio y m치s f치cil de leer.

Aqu칤 hay una posible implementaci칩n de la funci칩n con estas sugerencias aplicadas: */
const carriers2 = [
  ['lolivier', 8, ['camila', 'jesuspoleo']],
  ['camila', 5, ['sergiomartinez', 'conchaasensio']],
  ['jesuspoleo', 4, []],
  ['sergiomartinez', 4, []],
  ['conchaasensio', 3, ['facundocapua', 'faviola']],
  ['facundocapua', 2, []],
  ['faviola', 1, []],
]

countPackages(carriers2, 'camila') // 15
